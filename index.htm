
<!DOCTYPE html>
<meta charset="utf-8">

<link href="nv/src/nv.d3.css" rel="stylesheet" type="text/css">
<style>
  body {
    font: 10px sans-serif;
    overflow-y:scroll;
  }
  
  
  text {
    font: 12px sans-serif;
  }
  
  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }
  
  .dot {
    stroke: #000;
  }
  
  #chart1 {
    margin: 10px;
    min-width: 100px;
    min-height: 100px;;
    /*
    Minimum height and width is a good idea to prevent negative SVG dimensions...
    For example width should be =< margin.left + margin.right + 1,
    of course 1 pixel for the entire chart would not be very useful, BUT should not have errors
    */
  }
  
  #chart1 svg {
    height: 700px;
  }
  
  div.tooltip {
    
    position: absolute;
    
    text-align: center;
    
    width: 120px;
    
    height: 40px;
    
    padding: 2px;
    
    font: 12px sans-serif;
    
    background: lightsteelblue;
    
    border: 0px;
    
    border-radius: 8px;
    
    pointer-events: none;
    
  }
  
</style>
<body>
  <div stle="align:center">
    <div class="row-fluid">
    	<form>
    	<div id="departments" class="span12">
    	</div>
    	</form>
    </div>
    <div id="chart1" class='with-3d-shadow with-transitions'>
      <svg>
      </svg>
    </div>
  </div>
    <script src="/nv/lib/d3.v3.js">
    </script>
    <script src="/nv/nv.d3.js">
    </script>
    <script src="/nv/src/utils.js">
    </script>
    <script src="/nv/src/tooltip.js">
    </script>
    <script src="/nv/src/models/legend.js">
    </script>
    <script src="/nv/src/models/axis.js">
    </script>
    <script src="/nv/src/models/multiBarHorizontal.js">
    </script>
    <script src="/nv/src/models/multiBarHorizontalChart.js">
    </script>
    <script src="nv/stream_layers.js">
    </script>
    <script src="http://code.jquery.com/jquery-1.11.0.min.js">
    </script>
    <script>
      
      
      var chart;
      $.getJSON('multi.json', function(data){
      	window.bardata = data;
  		nv.addGraph(function() {
        chart = nv.models.multiBarHorizontalChart()
          .x(function(d) {
            return d.label }
            )
          .y(function(d) {
            return d.value }
            )
          .margin({
            top: 30, right: 20, bottom: 50, left: 175}
                 )
          //.showValues(true)
          //.tooltips(false)
          .barColor(d3.scale.category20().range())
          .transitionDuration(250)
          .stacked(false)
          //.showControls(false);
          
          chart.yAxis
            .tickFormat(d3.format(',.2f'));
        
        d3.select('#chart1 svg')
          .datum(bardata)
          .call(chart);
        
        nv.utils.windowResize(chart.update);
        chart.multibar.dispatch.on("elementClick", function(e) {
    		console.log(e);
		});

        chart.dispatch.on('stateChange', function(e) {
          nv.log('New State:', JSON.stringify(e));
        }
                         );
        
        return chart;
      },function(){
          d3.selectAll("text").on('click',
               function(){
                     console.log("test");
           });
      }
                 )});

      function loadDepartments(json){
        
      }
      
      function checkfilter (argument) {
        // body...
      }
      
      var margin = {
        top: 20, right: 20, bottom: 30, left: 40}
          ,
          width = 960 - margin.left - margin.right,
          height = 500 - margin.top - margin.bottom;
      
      var x = d3.scale.linear()
          .range([0, width]);
      
      var y = d3.scale.linear()
          .range([height, 0]);
      
      var color = d3.scale.category10();
      
      var xAxis = d3.svg.axis()
          .scale(x)
          .orient("bottom");
      
      var yAxis = d3.svg.axis()
          .scale(y)
          .orient("left");
      
      var svg = d3.select("body").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      
      d3.tsv("Nuclear Regulatory Commission.tsv", function(error, data) {
        data.forEach(function(d) {
          d.tv = +d.tv;
          d.cv = +d.cv;
        }
                    );
        
        x.domain(d3.extent(data, function(d) {
          return d.cv;
        }
                          )).nice();
        y.domain(d3.extent(data, function(d) {
          return d.tv;
        }
                          )).nice();
        
        svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis)
          .append("text")
          .attr("class", "label")
          .attr("x", width)
          .attr("y", -6)
          .style("text-anchor", "end")
          .text("Sepal Width (cm)");
        
        svg.append("g")
          .attr("class", "y axis")
          .call(yAxis)
          .append("text")
          .attr("class", "label")
          .attr("transform", "rotate(-90)")
          .attr("y", 6)
          .attr("dy", ".71em")
          .style("text-anchor", "end")
          .text("Sepal Length (cm)")
          
          svg.selectAll(".dot")
            .data(data)
            .enter().append("circle")
            .attr("class", "dot")
            .attr("r", 3.5)
            .attr("cx", function(d) {
              return x(d.cv);
            }
                 )
            .attr("cy", function(d) {
              return y(d.tv);
            }
                 )
            .style("fill", function(d) {
              return color(d.dept);
            }
                  )
            .on("mouseover", function(d) {
              
              div.transition()        
                .duration(200)      
                .style("opacity", .9);
              
              div .html(d.cv + "<br/>"  + d.dept)  
                .style("left", (d3.event.pageX) + "px")     
                .style("top", (d3.event.pageY - 28) + "px");
              
            }
               )                  
            .on("mouseout", function(d) {
              
              div.transition()        
                .duration(500)      
                .style("opacity", 0);
              
            }
               );
        
        var div = d3.select("body").append("div")   
            .attr("class", "tooltip")               
            .style("opacity", 0);
        
        var legend = svg.selectAll(".legend")
            .data(color.domain())
            .enter().append("g")
            .attr("class", "legend")
            .attr("transform", function(d, i) {
              return "translate(0," + i * 20 + ")";
            }
                 );
        
        legend.append("rect")
          .attr("x", width - 18)
          .attr("width", 18)
          .attr("height", 18)
          .style("fill", color);
        
        legend.append("text")
          .attr("x", width - 24)
          .attr("y", 9)
          .attr("dy", ".35em")
          .style("text-anchor", "end")
          .text(function(d) {
            return d.dept;
          }
               );
        
      }
            );
      
    </script>
    
    <script type="text/javascript">
      $.getJSON( "departments.json", function( data ) {
        var items = [];
        var count = 0;
        $.each( data, function( key, val ) {
          if (count % 3 == 0)
          {
          	if(count > 0)
          	{
          		items.push("</div>")
          	}
          	items.push("<div class='row-fluid'>")
          }

          items.push("<div class='span4'><input type='checkbox' id = '" + key + "' name = '" + val + "'> " + val + "</div>" );
          count++;
        }
              );
        
        $( "<div/>", {
          "class": "well",
          html: items.join( "" )
        }
         ).appendTo( "#departments" );

        $(":checkbox").click(function(){
    		console.log(this.name + this.checked)
    	});
      }
               );
    </script>

    <!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">

<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css">

<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
